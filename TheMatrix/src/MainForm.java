import java.lang.Math.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
//import javafx.scene.transform.MatrixType;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author zorin99
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    WelcomeForm wform;
    //PriorityForm pf;
    //private volatile boolean isstopped = false;
    public MainForm(){
        initComponents();
    }
    public MainForm(WelcomeForm welform){
        this();
        wform = welform;
    
    }
    //public MainForm(PriorityForm pform){this(); pf=pform;}
  
    Thread CheckThread = new Thread("Checking Thread"){
        
        @Override
        public void run(){
           try{
               
                ArrayList<Object> matlist= new ArrayList<>();
                String strmat = MatrixTypeTxtArea.getText();
                char type = 't';
                matlist = ReadMatrix(strmat, type);
                String str = (String) matlist.get(matlist.size()-1);
                MTypeTextField.setText("\'"+str+"\'"); 
                
                
            }catch(Exception ex){
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
           
        }
    };
    
    Thread Operationthread = new Thread("Operations Thread"){
        @Override
        public void run(){ 
            try{
                
                ArrayList<Object> matlist= new ArrayList<>();
                String strMat = OperationTextArea.getText();
                char type = 'o';
                matlist = ReadMatrix(strMat, type);
                DetectOperation(matlist);
                
            }catch(Exception ex){
                JOptionPane.showMessageDialog(rootPane, ex.getMessage());
            }
        }
    
    };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ManagerPane = new javax.swing.JTabbedPane();
        MatOperation = new javax.swing.JPanel();
        jOperationLabel = new javax.swing.JLabel();
        jResultLabel = new javax.swing.JLabel();
        jEqualLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        OperationTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        ResultTextArea = new javax.swing.JTextArea();
        MatTypes = new javax.swing.JPanel();
        jMatLabel = new javax.swing.JLabel();
        jTypeLabel = new javax.swing.JLabel();
        MTypeTextField = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        MatrixTypeTxtArea = new javax.swing.JTextArea();
        ControlPanel = new javax.swing.JPanel();
        Close = new javax.swing.JButton();
        StartButton = new javax.swing.JButton();
        PauseButton = new javax.swing.JButton();
        ResumeButton = new javax.swing.JButton();
        GettingNames = new javax.swing.JButton();
        pauseTxtField = new javax.swing.JTextField();
        ThreadPriority = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("The Matrix");
        setBackground(new java.awt.Color(149, 40, 40));
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setFont(new java.awt.Font("Abyssinica SIL", 1, 12)); // NOI18N
        setForeground(new java.awt.Color(133, 126, 126));
        setName("The Matrix"); // NOI18N

        ManagerPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Operations Manager", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 2, 14), new java.awt.Color(255, 4, 0))); // NOI18N

        MatOperation.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jOperationLabel.setText("Enter your operation:");

        jResultLabel.setText("Result:");

        jEqualLabel.setText("  =");

        OperationTextArea.setColumns(20);
        OperationTextArea.setRows(5);
        jScrollPane1.setViewportView(OperationTextArea);

        ResultTextArea.setColumns(20);
        ResultTextArea.setRows(5);
        jScrollPane2.setViewportView(ResultTextArea);

        javax.swing.GroupLayout MatOperationLayout = new javax.swing.GroupLayout(MatOperation);
        MatOperation.setLayout(MatOperationLayout);
        MatOperationLayout.setHorizontalGroup(
            MatOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MatOperationLayout.createSequentialGroup()
                .addGroup(MatOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MatOperationLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addComponent(jEqualLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(MatOperationLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jOperationLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(MatOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jResultLabel)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(127, 127, 127))
        );
        MatOperationLayout.setVerticalGroup(
            MatOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MatOperationLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(MatOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jOperationLabel)
                    .addComponent(jResultLabel))
                .addGroup(MatOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MatOperationLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(MatOperationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addGap(63, 63, 63))
                    .addGroup(MatOperationLayout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jEqualLabel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        ManagerPane.addTab("Operations", MatOperation);

        MatTypes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jMatLabel.setText("Matrix:");

        jTypeLabel.setText("Type:");

        MTypeTextField.setBackground(new java.awt.Color(249, 190, 190));

        MatrixTypeTxtArea.setColumns(20);
        MatrixTypeTxtArea.setRows(5);
        jScrollPane3.setViewportView(MatrixTypeTxtArea);

        javax.swing.GroupLayout MatTypesLayout = new javax.swing.GroupLayout(MatTypes);
        MatTypes.setLayout(MatTypesLayout);
        MatTypesLayout.setHorizontalGroup(
            MatTypesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MatTypesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MatTypesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jMatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(MatTypesLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69)
                        .addGroup(MatTypesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MTypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(128, Short.MAX_VALUE))
        );
        MatTypesLayout.setVerticalGroup(
            MatTypesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MatTypesLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jMatLabel)
                .addGap(7, 7, 7)
                .addGroup(MatTypesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(MatTypesLayout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jTypeLabel)
                        .addGap(21, 21, 21)
                        .addComponent(MTypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3))
                .addContainerGap(62, Short.MAX_VALUE))
        );

        ManagerPane.addTab("Types", MatTypes);

        ControlPanel.setBackground(new java.awt.Color(183, 198, 199));
        ControlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Control Panel", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 2, 14), new java.awt.Color(255, 4, 0))); // NOI18N

        Close.setBackground(new java.awt.Color(254, 193, 193));
        Close.setFont(new java.awt.Font("Roboto", 3, 15)); // NOI18N
        Close.setForeground(new java.awt.Color(12, 25, 30));
        Close.setText("Exit");
        Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseActionPerformed(evt);
            }
        });

        StartButton.setText("Start");
        StartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartButtonActionPerformed(evt);
            }
        });

        PauseButton.setText("Pause");
        PauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PauseButtonActionPerformed(evt);
            }
        });

        ResumeButton.setText("Resume");
        ResumeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResumeButtonActionPerformed(evt);
            }
        });

        GettingNames.setText("Get threads name");
        GettingNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GettingNamesActionPerformed(evt);
            }
        });

        ThreadPriority.setText("Priorities");
        ThreadPriority.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ThreadPriorityActionPerformed(evt);
            }
        });

        jLabel1.setText("time:");

        javax.swing.GroupLayout ControlPanelLayout = new javax.swing.GroupLayout(ControlPanel);
        ControlPanel.setLayout(ControlPanelLayout);
        ControlPanelLayout.setHorizontalGroup(
            ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ControlPanelLayout.createSequentialGroup()
                        .addComponent(GettingNames)
                        .addGap(18, 18, 18)
                        .addComponent(ThreadPriority, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ResumeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(288, 288, 288)
                        .addComponent(Close, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ControlPanelLayout.createSequentialGroup()
                        .addComponent(StartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(PauseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pauseTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        ControlPanelLayout.setVerticalGroup(
            ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ControlPanelLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(StartButton)
                    .addComponent(PauseButton)
                    .addComponent(pauseTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Close)
                    .addComponent(GettingNames)
                    .addComponent(ThreadPriority)
                    .addComponent(ResumeButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ManagerPane, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ControlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ManagerPane, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //Reading Method: Reads Matrix from GUI...with the correct expression
    public ArrayList ReadMatrix(String s,char check){
        ArrayList<Object> matrixList = new ArrayList<>();
        String stringMatrix;
        //boolean x=false;
        try{
        Matcher matcher;
            matcher = Pattern.compile(Pattern.quote("{") + "\\d*?\\[\\d*(\\,\\d*)*(\\|\\d*(\\,\\d*)*)*\\]\\w?(\\W\\d*?\\[\\d*(\\,\\d*)*(\\|\\d*(\\,\\d*)*)*\\]\\w?)*?"
                    + Pattern.quote("}")
            ).matcher(s);
        if(matcher.matches()){
                String equation = s.substring(1,s.length()-1);
                if(check == 'o'){
                for(int i=0;i<equation.length();i++){
                   // if(x==true)
                     //   break;
                    //check for scalar ex: 2*A
                    if(i == 0 && equation.charAt(i) != '['){
                     
                        matrixList.add(equation.charAt(i));
                        equation = equation.substring(1); 
                        i=-1;
                    }else if(equation.charAt(i) == ']' || equation.charAt(i)== 't'){
                                if(i == equation.length()-1){
                                    stringMatrix = equation.substring(1,i);
                                    double [][] matrix =MatrixOperations.createMatrix(stringMatrix);
                                    matrixList.add(matrix);
                                  // x=true;
                                    //ResultTextArea.setText("ya rab");
                                    break;
                                }
                                else{
                                    stringMatrix = equation.substring(1,i);
                                    double [][] matrix = MatrixOperations.createMatrix(stringMatrix);
                                    equation = equation.substring(i+1);
                                    matrixList.add(matrix);
                                    i=-1;
                            }
                        }
                   }
                    
                }else{matrixList.add(MatrixOperations.checkMatType(MatrixOperations.createMatrix(equation.substring(1,equation.length()-1))));}
        }else{
        ResultTextArea.setText("No entered elements!");
        }
        }catch(Exception ex){
            JOptionPane.showMessageDialog(rootPane, ex);
        }
        
     return matrixList;
    }
    //hna h3ml call le kol thread ms2ola 3n operation 3la 7sb el condition
    public void DetectOperation(ArrayList<Object> matlist){
        ArrayList<Object> temp = new ArrayList<>();
        Iterator<Object> itr = temp.iterator();
        ArrayList<Object> matlistc= new ArrayList<>();
        matlistc=matlist;
        for (Iterator<Object> iterator = matlistc.iterator(); iterator.hasNext();) {
            Object element = iterator.next();
            if(element instanceof Character){
                if((char)element == 't' ||(char)element == 'T'){
                   // char x='t';
                  double[][] newmatrix = MatrixOperations.mTranspose((double[][]) matlistc.get(0));
                  ResultTextArea.setText(Arrays.deepToString(newmatrix));
               
            
                }else if((char)element == '*'){
                 double[][] newmatrix = MatrixOperations.mMultiplication((double[][]) matlistc.get(0), (double[][]) matlistc.get(2));
                  ResultTextArea.setText(Arrays.deepToString(newmatrix));   
                   matlistc.set(0, newmatrix);
                   matlistc.remove(1);
              
                }else if (element.toString().matches("\\d*")){
                    String i = element.toString();
                    int x= Integer.parseInt(i);
                double[][] newmatrix = MatrixOperations.mScalarMulti((double[][]) matlistc.get(1),x );
                  ResultTextArea.setText(Arrays.deepToString(newmatrix));
                  matlistc.set(0, newmatrix);
                
                }else if((char)element == '+'){
                    double[][] newmatrix = MatrixOperations.mAddition((double[][])matlistc.get(0),(double[][]) matlistc.get(2));
                    ResultTextArea.setText(Arrays.deepToString(newmatrix));
                    matlistc.set(0,newmatrix);
                    matlistc.remove(1);
                
                }else if((char)element == '-'){
                    double[][] newmatrix = MatrixOperations.mSubtraction((double[][])matlistc.get(0),(double[][]) matlistc.get(2));
                    ResultTextArea.setText(Arrays.deepToString(newmatrix));
                    matlistc.set(0,newmatrix);
                    matlistc.remove(1);
              
                }
          
            }else{temp.add(element);}
          
        }
     
        
    }
   
    private void CloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_CloseActionPerformed

    private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtonActionPerformed
        // TODO add your handling code here:
        try{
            CheckThread.run();
            Operationthread.run();
      
        }catch(Exception ex){
            JOptionPane.showMessageDialog(rootPane, ex);
        }
       
    }//GEN-LAST:event_StartButtonActionPerformed

    private void PauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PauseButtonActionPerformed
        // TODO add your handling code here:
        try{
        int time = Integer.parseInt(pauseTxtField.getText());
        CheckThread.sleep(time);
        Operationthread.sleep(time);
        
        }catch(InterruptedException ex){
            JOptionPane.showMessageDialog(null,"Threads interrupted!..");
            
        }
    }//GEN-LAST:event_PauseButtonActionPerformed

    private void GettingNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GettingNamesActionPerformed
        // TODO add your handling code here:
        String name1 = CheckThread.getName();
        String name2 = Operationthread.getName();
        JOptionPane.showMessageDialog(null,"Thread 1:"+name1+"\n"+"Thread 2:"+name2);
        
    }//GEN-LAST:event_GettingNamesActionPerformed

    private void ThreadPriorityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ThreadPriorityActionPerformed
        // TODO add your handling code here:
        //PriorityForm perform = new PriorityForm();
        //perform.setVisible(true);
        int cpriority;
        int opriority;
        JOptionPane.showMessageDialog(null,Operationthread.getName()+":"+Operationthread.getPriority()+"\n"+CheckThread.getName()+":"+CheckThread.getPriority(),"Threads Priority",JOptionPane.INFORMATION_MESSAGE);
        cpriority = Integer.parseInt(JOptionPane.showInputDialog(null,"Check Thread Priority:","Threads Priority",JOptionPane.INFORMATION_MESSAGE));
        opriority = Integer.parseInt(JOptionPane.showInputDialog(null,"Operations Thread Priority:","Threads Priority",JOptionPane.INFORMATION_MESSAGE));
        CheckThread.setPriority(cpriority);
        Operationthread.setPriority(opriority);
        
    }//GEN-LAST:event_ThreadPriorityActionPerformed

    private void ResumeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResumeButtonActionPerformed
        // TODO add your handling code here:
        try{
            CheckThread.resume();
            Operationthread.resume();
       
        }catch(Exception ex){ JOptionPane.showMessageDialog(null,ex.getMessage()); }
    }//GEN-LAST:event_ResumeButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Close;
    private javax.swing.JPanel ControlPanel;
    private javax.swing.JButton GettingNames;
    private javax.swing.JTextField MTypeTextField;
    private javax.swing.JTabbedPane ManagerPane;
    private javax.swing.JPanel MatOperation;
    private javax.swing.JPanel MatTypes;
    private javax.swing.JTextArea MatrixTypeTxtArea;
    private javax.swing.JTextArea OperationTextArea;
    private javax.swing.JButton PauseButton;
    private javax.swing.JTextArea ResultTextArea;
    private javax.swing.JButton ResumeButton;
    private javax.swing.JButton StartButton;
    private javax.swing.JButton ThreadPriority;
    private javax.swing.JLabel jEqualLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jMatLabel;
    private javax.swing.JLabel jOperationLabel;
    private javax.swing.JLabel jResultLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel jTypeLabel;
    private javax.swing.JTextField pauseTxtField;
    // End of variables declaration//GEN-END:variables

    private void run(Thread CheckThread) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
